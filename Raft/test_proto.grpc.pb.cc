// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: test_proto.proto

#include "test_proto.pb.h"
#include "test_proto.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace test {

static const char* Vergil_method_names[] = {
  "/test.Vergil/RequestVote",
  "/test.Vergil/AppendEntries",
  "/test.Vergil/LeaderAppend",
  "/test.Vergil/GetValue",
};

std::unique_ptr< Vergil::Stub> Vergil::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Vergil::Stub> stub(new Vergil::Stub(channel));
  return stub;
}

Vergil::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_RequestVote_(Vergil_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AppendEntries_(Vergil_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LeaderAppend_(Vergil_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetValue_(Vergil_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Vergil::Stub::RequestVote(::grpc::ClientContext* context, const ::test::RequestVoteMessage& request, ::test::Reply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RequestVote_, context, request, response);
}

void Vergil::Stub::experimental_async::RequestVote(::grpc::ClientContext* context, const ::test::RequestVoteMessage* request, ::test::Reply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RequestVote_, context, request, response, std::move(f));
}

void Vergil::Stub::experimental_async::RequestVote(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::test::Reply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RequestVote_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::test::Reply>* Vergil::Stub::AsyncRequestVoteRaw(::grpc::ClientContext* context, const ::test::RequestVoteMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::test::Reply>::Create(channel_.get(), cq, rpcmethod_RequestVote_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::test::Reply>* Vergil::Stub::PrepareAsyncRequestVoteRaw(::grpc::ClientContext* context, const ::test::RequestVoteMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::test::Reply>::Create(channel_.get(), cq, rpcmethod_RequestVote_, context, request, false);
}

::grpc::Status Vergil::Stub::AppendEntries(::grpc::ClientContext* context, const ::test::AppendEntriesMessage& request, ::test::Reply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AppendEntries_, context, request, response);
}

void Vergil::Stub::experimental_async::AppendEntries(::grpc::ClientContext* context, const ::test::AppendEntriesMessage* request, ::test::Reply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AppendEntries_, context, request, response, std::move(f));
}

void Vergil::Stub::experimental_async::AppendEntries(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::test::Reply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AppendEntries_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::test::Reply>* Vergil::Stub::AsyncAppendEntriesRaw(::grpc::ClientContext* context, const ::test::AppendEntriesMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::test::Reply>::Create(channel_.get(), cq, rpcmethod_AppendEntries_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::test::Reply>* Vergil::Stub::PrepareAsyncAppendEntriesRaw(::grpc::ClientContext* context, const ::test::AppendEntriesMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::test::Reply>::Create(channel_.get(), cq, rpcmethod_AppendEntries_, context, request, false);
}

::grpc::Status Vergil::Stub::LeaderAppend(::grpc::ClientContext* context, const ::test::Entry& request, ::test::Reply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_LeaderAppend_, context, request, response);
}

void Vergil::Stub::experimental_async::LeaderAppend(::grpc::ClientContext* context, const ::test::Entry* request, ::test::Reply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_LeaderAppend_, context, request, response, std::move(f));
}

void Vergil::Stub::experimental_async::LeaderAppend(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::test::Reply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_LeaderAppend_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::test::Reply>* Vergil::Stub::AsyncLeaderAppendRaw(::grpc::ClientContext* context, const ::test::Entry& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::test::Reply>::Create(channel_.get(), cq, rpcmethod_LeaderAppend_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::test::Reply>* Vergil::Stub::PrepareAsyncLeaderAppendRaw(::grpc::ClientContext* context, const ::test::Entry& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::test::Reply>::Create(channel_.get(), cq, rpcmethod_LeaderAppend_, context, request, false);
}

::grpc::Status Vergil::Stub::GetValue(::grpc::ClientContext* context, const ::test::GetV& request, ::test::GetV* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetValue_, context, request, response);
}

void Vergil::Stub::experimental_async::GetValue(::grpc::ClientContext* context, const ::test::GetV* request, ::test::GetV* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetValue_, context, request, response, std::move(f));
}

void Vergil::Stub::experimental_async::GetValue(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::test::GetV* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetValue_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::test::GetV>* Vergil::Stub::AsyncGetValueRaw(::grpc::ClientContext* context, const ::test::GetV& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::test::GetV>::Create(channel_.get(), cq, rpcmethod_GetValue_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::test::GetV>* Vergil::Stub::PrepareAsyncGetValueRaw(::grpc::ClientContext* context, const ::test::GetV& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::test::GetV>::Create(channel_.get(), cq, rpcmethod_GetValue_, context, request, false);
}

Vergil::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Vergil_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Vergil::Service, ::test::RequestVoteMessage, ::test::Reply>(
          std::mem_fn(&Vergil::Service::RequestVote), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Vergil_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Vergil::Service, ::test::AppendEntriesMessage, ::test::Reply>(
          std::mem_fn(&Vergil::Service::AppendEntries), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Vergil_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Vergil::Service, ::test::Entry, ::test::Reply>(
          std::mem_fn(&Vergil::Service::LeaderAppend), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Vergil_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Vergil::Service, ::test::GetV, ::test::GetV>(
          std::mem_fn(&Vergil::Service::GetValue), this)));
}

Vergil::Service::~Service() {
}

::grpc::Status Vergil::Service::RequestVote(::grpc::ServerContext* context, const ::test::RequestVoteMessage* request, ::test::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Vergil::Service::AppendEntries(::grpc::ServerContext* context, const ::test::AppendEntriesMessage* request, ::test::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Vergil::Service::LeaderAppend(::grpc::ServerContext* context, const ::test::Entry* request, ::test::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Vergil::Service::GetValue(::grpc::ServerContext* context, const ::test::GetV* request, ::test::GetV* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace test

