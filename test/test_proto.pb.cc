// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test_proto.proto

#include "test_proto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_test_5fproto_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Entry_test_5fproto_2eproto;
namespace test {
class GetVDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetV> _instance;
} _GetV_default_instance_;
class EntryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Entry> _instance;
} _Entry_default_instance_;
class RequestVoteMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestVoteMessage> _instance;
} _RequestVoteMessage_default_instance_;
class AppendEntriesMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AppendEntriesMessage> _instance;
} _AppendEntriesMessage_default_instance_;
class ReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Reply> _instance;
} _Reply_default_instance_;
}  // namespace test
static void InitDefaultsGetV_test_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::test::_GetV_default_instance_;
    new (ptr) ::test::GetV();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::test::GetV::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetV_test_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetV_test_5fproto_2eproto}, {}};

static void InitDefaultsEntry_test_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::test::_Entry_default_instance_;
    new (ptr) ::test::Entry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::test::Entry::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Entry_test_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEntry_test_5fproto_2eproto}, {}};

static void InitDefaultsRequestVoteMessage_test_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::test::_RequestVoteMessage_default_instance_;
    new (ptr) ::test::RequestVoteMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::test::RequestVoteMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RequestVoteMessage_test_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequestVoteMessage_test_5fproto_2eproto}, {}};

static void InitDefaultsAppendEntriesMessage_test_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::test::_AppendEntriesMessage_default_instance_;
    new (ptr) ::test::AppendEntriesMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::test::AppendEntriesMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AppendEntriesMessage_test_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAppendEntriesMessage_test_5fproto_2eproto}, {
      &scc_info_Entry_test_5fproto_2eproto.base,}};

static void InitDefaultsReply_test_5fproto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::test::_Reply_default_instance_;
    new (ptr) ::test::Reply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::test::Reply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Reply_test_5fproto_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReply_test_5fproto_2eproto}, {}};

void InitDefaults_test_5fproto_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_GetV_test_5fproto_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Entry_test_5fproto_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RequestVoteMessage_test_5fproto_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AppendEntriesMessage_test_5fproto_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Reply_test_5fproto_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_test_5fproto_2eproto[5];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_test_5fproto_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_test_5fproto_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_test_5fproto_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::test::GetV, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::test::GetV, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::test::Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::test::Entry, term_),
  PROTOBUF_FIELD_OFFSET(::test::Entry, key_),
  PROTOBUF_FIELD_OFFSET(::test::Entry, args_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::test::RequestVoteMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::test::RequestVoteMessage, term_),
  PROTOBUF_FIELD_OFFSET(::test::RequestVoteMessage, candidateid_),
  PROTOBUF_FIELD_OFFSET(::test::RequestVoteMessage, lastlogindex_),
  PROTOBUF_FIELD_OFFSET(::test::RequestVoteMessage, lastlogterm_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::test::AppendEntriesMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::test::AppendEntriesMessage, term_),
  PROTOBUF_FIELD_OFFSET(::test::AppendEntriesMessage, leaderid_),
  PROTOBUF_FIELD_OFFSET(::test::AppendEntriesMessage, prevlogindex_),
  PROTOBUF_FIELD_OFFSET(::test::AppendEntriesMessage, prevlogterm_),
  PROTOBUF_FIELD_OFFSET(::test::AppendEntriesMessage, entries_),
  PROTOBUF_FIELD_OFFSET(::test::AppendEntriesMessage, leadercommit_),
  PROTOBUF_FIELD_OFFSET(::test::AppendEntriesMessage, logsiz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::test::Reply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::test::Reply, term_),
  PROTOBUF_FIELD_OFFSET(::test::Reply, ans_),
  PROTOBUF_FIELD_OFFSET(::test::Reply, logsiz_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::test::GetV)},
  { 6, -1, sizeof(::test::Entry)},
  { 14, -1, sizeof(::test::RequestVoteMessage)},
  { 23, -1, sizeof(::test::AppendEntriesMessage)},
  { 35, -1, sizeof(::test::Reply)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::test::_GetV_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::test::_Entry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::test::_RequestVoteMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::test::_AppendEntriesMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::test::_Reply_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_test_5fproto_2eproto = {
  {}, AddDescriptors_test_5fproto_2eproto, "test_proto.proto", schemas,
  file_default_instances, TableStruct_test_5fproto_2eproto::offsets,
  file_level_metadata_test_5fproto_2eproto, 5, file_level_enum_descriptors_test_5fproto_2eproto, file_level_service_descriptors_test_5fproto_2eproto,
};

const char descriptor_table_protodef_test_5fproto_2eproto[] =
  "\n\020test_proto.proto\022\004test\"\023\n\004GetV\022\013\n\003key\030"
  "\001 \001(\t\"0\n\005Entry\022\014\n\004term\030\001 \001(\005\022\013\n\003key\030\002 \001("
  "\t\022\014\n\004args\030\003 \001(\t\"b\n\022RequestVoteMessage\022\014\n"
  "\004term\030\001 \001(\005\022\023\n\013candidateID\030\002 \001(\t\022\024\n\014last"
  "LogIndex\030\003 \001(\005\022\023\n\013lastLogTerm\030\004 \001(\005\"\245\001\n\024"
  "AppendEntriesMessage\022\014\n\004term\030\001 \001(\005\022\020\n\010le"
  "aderID\030\002 \001(\t\022\024\n\014prevLogIndex\030\003 \001(\005\022\023\n\013pr"
  "evLogTerm\030\004 \001(\005\022\034\n\007entries\030\005 \003(\0132\013.test."
  "Entry\022\024\n\014leaderCommit\030\006 \001(\005\022\016\n\006logsiz\030\007 "
  "\001(\005\"2\n\005Reply\022\014\n\004term\030\001 \001(\005\022\013\n\003ans\030\002 \001(\010\022"
  "\016\n\006logsiz\030\003 \001(\0052\316\001\n\006Vergil\0226\n\013RequestVot"
  "e\022\030.test.RequestVoteMessage\032\013.test.Reply"
  "\"\000\022:\n\rAppendEntries\022\032.test.AppendEntries"
  "Message\032\013.test.Reply\"\000\022*\n\014LeaderAppend\022\013"
  ".test.Entry\032\013.test.Reply\"\000\022$\n\010GetValue\022\n"
  ".test.GetV\032\n.test.GetV\"\000b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_test_5fproto_2eproto = {
  false, InitDefaults_test_5fproto_2eproto, 
  descriptor_table_protodef_test_5fproto_2eproto,
  "test_proto.proto", &assign_descriptors_table_test_5fproto_2eproto, 632,
};

void AddDescriptors_test_5fproto_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_test_5fproto_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_test_5fproto_2eproto = []() { AddDescriptors_test_5fproto_2eproto(); return true; }();
namespace test {

// ===================================================================

void GetV::InitAsDefaultInstance() {
}
class GetV::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetV::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetV::GetV()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:test.GetV)
}
GetV::GetV(const GetV& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  // @@protoc_insertion_point(copy_constructor:test.GetV)
}

void GetV::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetV_test_5fproto_2eproto.base);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetV::~GetV() {
  // @@protoc_insertion_point(destructor:test.GetV)
  SharedDtor();
}

void GetV::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetV::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetV& GetV::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetV_test_5fproto_2eproto.base);
  return *internal_default_instance();
}


void GetV::Clear() {
// @@protoc_insertion_point(message_clear_start:test.GetV)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetV::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetV*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("test.GetV.key");
        object = msg->mutable_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetV::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:test.GetV)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "test.GetV.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:test.GetV)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:test.GetV)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetV::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:test.GetV)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "test.GetV.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:test.GetV)
}

::google::protobuf::uint8* GetV::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:test.GetV)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "test.GetV.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test.GetV)
  return target;
}

size_t GetV::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test.GetV)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetV::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:test.GetV)
  GOOGLE_DCHECK_NE(&from, this);
  const GetV* source =
      ::google::protobuf::DynamicCastToGenerated<GetV>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:test.GetV)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:test.GetV)
    MergeFrom(*source);
  }
}

void GetV::MergeFrom(const GetV& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:test.GetV)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
}

void GetV::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:test.GetV)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetV::CopyFrom(const GetV& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test.GetV)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetV::IsInitialized() const {
  return true;
}

void GetV::Swap(GetV* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetV::InternalSwap(GetV* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata GetV::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_test_5fproto_2eproto);
  return ::file_level_metadata_test_5fproto_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Entry::InitAsDefaultInstance() {
}
class Entry::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Entry::kTermFieldNumber;
const int Entry::kKeyFieldNumber;
const int Entry::kArgsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Entry::Entry()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:test.Entry)
}
Entry::Entry(const Entry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  args_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.args().size() > 0) {
    args_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.args_);
  }
  term_ = from.term_;
  // @@protoc_insertion_point(copy_constructor:test.Entry)
}

void Entry::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Entry_test_5fproto_2eproto.base);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  args_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  term_ = 0;
}

Entry::~Entry() {
  // @@protoc_insertion_point(destructor:test.Entry)
  SharedDtor();
}

void Entry::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  args_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Entry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Entry& Entry::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Entry_test_5fproto_2eproto.base);
  return *internal_default_instance();
}


void Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:test.Entry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  args_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  term_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Entry::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Entry*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 term = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_term(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string key = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("test.Entry.key");
        object = msg->mutable_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string args = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("test.Entry.args");
        object = msg->mutable_args();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:test.Entry)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 term = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "test.Entry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string args = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_args()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->args().data(), static_cast<int>(this->args().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "test.Entry.args"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:test.Entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:test.Entry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:test.Entry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 term = 1;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->term(), output);
  }

  // string key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "test.Entry.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->key(), output);
  }

  // string args = 3;
  if (this->args().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->args().data(), static_cast<int>(this->args().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "test.Entry.args");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->args(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:test.Entry)
}

::google::protobuf::uint8* Entry::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:test.Entry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 term = 1;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->term(), target);
  }

  // string key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "test.Entry.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }

  // string args = 3;
  if (this->args().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->args().data(), static_cast<int>(this->args().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "test.Entry.args");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->args(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test.Entry)
  return target;
}

size_t Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test.Entry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // string args = 3;
  if (this->args().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->args());
  }

  // int32 term = 1;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->term());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Entry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:test.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  const Entry* source =
      ::google::protobuf::DynamicCastToGenerated<Entry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:test.Entry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:test.Entry)
    MergeFrom(*source);
  }
}

void Entry::MergeFrom(const Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:test.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.args().size() > 0) {

    args_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.args_);
  }
  if (from.term() != 0) {
    set_term(from.term());
  }
}

void Entry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:test.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Entry::CopyFrom(const Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Entry::IsInitialized() const {
  return true;
}

void Entry::Swap(Entry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Entry::InternalSwap(Entry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  args_.Swap(&other->args_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(term_, other->term_);
}

::google::protobuf::Metadata Entry::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_test_5fproto_2eproto);
  return ::file_level_metadata_test_5fproto_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RequestVoteMessage::InitAsDefaultInstance() {
}
class RequestVoteMessage::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestVoteMessage::kTermFieldNumber;
const int RequestVoteMessage::kCandidateIDFieldNumber;
const int RequestVoteMessage::kLastLogIndexFieldNumber;
const int RequestVoteMessage::kLastLogTermFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestVoteMessage::RequestVoteMessage()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:test.RequestVoteMessage)
}
RequestVoteMessage::RequestVoteMessage(const RequestVoteMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  candidateid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.candidateid().size() > 0) {
    candidateid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.candidateid_);
  }
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&lastlogterm_) -
    reinterpret_cast<char*>(&term_)) + sizeof(lastlogterm_));
  // @@protoc_insertion_point(copy_constructor:test.RequestVoteMessage)
}

void RequestVoteMessage::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RequestVoteMessage_test_5fproto_2eproto.base);
  candidateid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lastlogterm_) -
      reinterpret_cast<char*>(&term_)) + sizeof(lastlogterm_));
}

RequestVoteMessage::~RequestVoteMessage() {
  // @@protoc_insertion_point(destructor:test.RequestVoteMessage)
  SharedDtor();
}

void RequestVoteMessage::SharedDtor() {
  candidateid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RequestVoteMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestVoteMessage& RequestVoteMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RequestVoteMessage_test_5fproto_2eproto.base);
  return *internal_default_instance();
}


void RequestVoteMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:test.RequestVoteMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  candidateid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lastlogterm_) -
      reinterpret_cast<char*>(&term_)) + sizeof(lastlogterm_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RequestVoteMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RequestVoteMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 term = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_term(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string candidateID = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("test.RequestVoteMessage.candidateID");
        object = msg->mutable_candidateid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 lastLogIndex = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_lastlogindex(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 lastLogTerm = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_lastlogterm(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RequestVoteMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:test.RequestVoteMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 term = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string candidateID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_candidateid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->candidateid().data(), static_cast<int>(this->candidateid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "test.RequestVoteMessage.candidateID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lastLogIndex = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastlogindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lastLogTerm = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastlogterm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:test.RequestVoteMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:test.RequestVoteMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RequestVoteMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:test.RequestVoteMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 term = 1;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->term(), output);
  }

  // string candidateID = 2;
  if (this->candidateid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->candidateid().data(), static_cast<int>(this->candidateid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "test.RequestVoteMessage.candidateID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->candidateid(), output);
  }

  // int32 lastLogIndex = 3;
  if (this->lastlogindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lastlogindex(), output);
  }

  // int32 lastLogTerm = 4;
  if (this->lastlogterm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lastlogterm(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:test.RequestVoteMessage)
}

::google::protobuf::uint8* RequestVoteMessage::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:test.RequestVoteMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 term = 1;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->term(), target);
  }

  // string candidateID = 2;
  if (this->candidateid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->candidateid().data(), static_cast<int>(this->candidateid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "test.RequestVoteMessage.candidateID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->candidateid(), target);
  }

  // int32 lastLogIndex = 3;
  if (this->lastlogindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lastlogindex(), target);
  }

  // int32 lastLogTerm = 4;
  if (this->lastlogterm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lastlogterm(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test.RequestVoteMessage)
  return target;
}

size_t RequestVoteMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test.RequestVoteMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string candidateID = 2;
  if (this->candidateid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->candidateid());
  }

  // int32 term = 1;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->term());
  }

  // int32 lastLogIndex = 3;
  if (this->lastlogindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lastlogindex());
  }

  // int32 lastLogTerm = 4;
  if (this->lastlogterm() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lastlogterm());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestVoteMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:test.RequestVoteMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestVoteMessage* source =
      ::google::protobuf::DynamicCastToGenerated<RequestVoteMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:test.RequestVoteMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:test.RequestVoteMessage)
    MergeFrom(*source);
  }
}

void RequestVoteMessage::MergeFrom(const RequestVoteMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:test.RequestVoteMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.candidateid().size() > 0) {

    candidateid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.candidateid_);
  }
  if (from.term() != 0) {
    set_term(from.term());
  }
  if (from.lastlogindex() != 0) {
    set_lastlogindex(from.lastlogindex());
  }
  if (from.lastlogterm() != 0) {
    set_lastlogterm(from.lastlogterm());
  }
}

void RequestVoteMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:test.RequestVoteMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestVoteMessage::CopyFrom(const RequestVoteMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test.RequestVoteMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestVoteMessage::IsInitialized() const {
  return true;
}

void RequestVoteMessage::Swap(RequestVoteMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestVoteMessage::InternalSwap(RequestVoteMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  candidateid_.Swap(&other->candidateid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(term_, other->term_);
  swap(lastlogindex_, other->lastlogindex_);
  swap(lastlogterm_, other->lastlogterm_);
}

::google::protobuf::Metadata RequestVoteMessage::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_test_5fproto_2eproto);
  return ::file_level_metadata_test_5fproto_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AppendEntriesMessage::InitAsDefaultInstance() {
}
class AppendEntriesMessage::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AppendEntriesMessage::kTermFieldNumber;
const int AppendEntriesMessage::kLeaderIDFieldNumber;
const int AppendEntriesMessage::kPrevLogIndexFieldNumber;
const int AppendEntriesMessage::kPrevLogTermFieldNumber;
const int AppendEntriesMessage::kEntriesFieldNumber;
const int AppendEntriesMessage::kLeaderCommitFieldNumber;
const int AppendEntriesMessage::kLogsizFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AppendEntriesMessage::AppendEntriesMessage()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:test.AppendEntriesMessage)
}
AppendEntriesMessage::AppendEntriesMessage(const AppendEntriesMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  leaderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.leaderid().size() > 0) {
    leaderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leaderid_);
  }
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&logsiz_) -
    reinterpret_cast<char*>(&term_)) + sizeof(logsiz_));
  // @@protoc_insertion_point(copy_constructor:test.AppendEntriesMessage)
}

void AppendEntriesMessage::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AppendEntriesMessage_test_5fproto_2eproto.base);
  leaderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&logsiz_) -
      reinterpret_cast<char*>(&term_)) + sizeof(logsiz_));
}

AppendEntriesMessage::~AppendEntriesMessage() {
  // @@protoc_insertion_point(destructor:test.AppendEntriesMessage)
  SharedDtor();
}

void AppendEntriesMessage::SharedDtor() {
  leaderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AppendEntriesMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppendEntriesMessage& AppendEntriesMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AppendEntriesMessage_test_5fproto_2eproto.base);
  return *internal_default_instance();
}


void AppendEntriesMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:test.AppendEntriesMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  leaderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&logsiz_) -
      reinterpret_cast<char*>(&term_)) + sizeof(logsiz_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AppendEntriesMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AppendEntriesMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 term = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_term(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string leaderID = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("test.AppendEntriesMessage.leaderID");
        object = msg->mutable_leaderid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 prevLogIndex = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_prevlogindex(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 prevLogTerm = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_prevlogterm(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .test.Entry entries = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::test::Entry::_InternalParse;
          object = msg->add_entries();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      // int32 leaderCommit = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_leadercommit(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 logsiz = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_logsiz(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AppendEntriesMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:test.AppendEntriesMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 term = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string leaderID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leaderid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->leaderid().data(), static_cast<int>(this->leaderid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "test.AppendEntriesMessage.leaderID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 prevLogIndex = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prevlogindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 prevLogTerm = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prevlogterm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .test.Entry entries = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 leaderCommit = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leadercommit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 logsiz = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &logsiz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:test.AppendEntriesMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:test.AppendEntriesMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AppendEntriesMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:test.AppendEntriesMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 term = 1;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->term(), output);
  }

  // string leaderID = 2;
  if (this->leaderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->leaderid().data(), static_cast<int>(this->leaderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "test.AppendEntriesMessage.leaderID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->leaderid(), output);
  }

  // int32 prevLogIndex = 3;
  if (this->prevlogindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->prevlogindex(), output);
  }

  // int32 prevLogTerm = 4;
  if (this->prevlogterm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->prevlogterm(), output);
  }

  // repeated .test.Entry entries = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->entries(static_cast<int>(i)),
      output);
  }

  // int32 leaderCommit = 6;
  if (this->leadercommit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->leadercommit(), output);
  }

  // int32 logsiz = 7;
  if (this->logsiz() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->logsiz(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:test.AppendEntriesMessage)
}

::google::protobuf::uint8* AppendEntriesMessage::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:test.AppendEntriesMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 term = 1;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->term(), target);
  }

  // string leaderID = 2;
  if (this->leaderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->leaderid().data(), static_cast<int>(this->leaderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "test.AppendEntriesMessage.leaderID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->leaderid(), target);
  }

  // int32 prevLogIndex = 3;
  if (this->prevlogindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->prevlogindex(), target);
  }

  // int32 prevLogTerm = 4;
  if (this->prevlogterm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->prevlogterm(), target);
  }

  // repeated .test.Entry entries = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->entries(static_cast<int>(i)), target);
  }

  // int32 leaderCommit = 6;
  if (this->leadercommit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->leadercommit(), target);
  }

  // int32 logsiz = 7;
  if (this->logsiz() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->logsiz(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test.AppendEntriesMessage)
  return target;
}

size_t AppendEntriesMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test.AppendEntriesMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .test.Entry entries = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->entries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->entries(static_cast<int>(i)));
    }
  }

  // string leaderID = 2;
  if (this->leaderid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->leaderid());
  }

  // int32 term = 1;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->term());
  }

  // int32 prevLogIndex = 3;
  if (this->prevlogindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->prevlogindex());
  }

  // int32 prevLogTerm = 4;
  if (this->prevlogterm() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->prevlogterm());
  }

  // int32 leaderCommit = 6;
  if (this->leadercommit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->leadercommit());
  }

  // int32 logsiz = 7;
  if (this->logsiz() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->logsiz());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppendEntriesMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:test.AppendEntriesMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const AppendEntriesMessage* source =
      ::google::protobuf::DynamicCastToGenerated<AppendEntriesMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:test.AppendEntriesMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:test.AppendEntriesMessage)
    MergeFrom(*source);
  }
}

void AppendEntriesMessage::MergeFrom(const AppendEntriesMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:test.AppendEntriesMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  if (from.leaderid().size() > 0) {

    leaderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leaderid_);
  }
  if (from.term() != 0) {
    set_term(from.term());
  }
  if (from.prevlogindex() != 0) {
    set_prevlogindex(from.prevlogindex());
  }
  if (from.prevlogterm() != 0) {
    set_prevlogterm(from.prevlogterm());
  }
  if (from.leadercommit() != 0) {
    set_leadercommit(from.leadercommit());
  }
  if (from.logsiz() != 0) {
    set_logsiz(from.logsiz());
  }
}

void AppendEntriesMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:test.AppendEntriesMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendEntriesMessage::CopyFrom(const AppendEntriesMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test.AppendEntriesMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendEntriesMessage::IsInitialized() const {
  return true;
}

void AppendEntriesMessage::Swap(AppendEntriesMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AppendEntriesMessage::InternalSwap(AppendEntriesMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&entries_)->InternalSwap(CastToBase(&other->entries_));
  leaderid_.Swap(&other->leaderid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(term_, other->term_);
  swap(prevlogindex_, other->prevlogindex_);
  swap(prevlogterm_, other->prevlogterm_);
  swap(leadercommit_, other->leadercommit_);
  swap(logsiz_, other->logsiz_);
}

::google::protobuf::Metadata AppendEntriesMessage::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_test_5fproto_2eproto);
  return ::file_level_metadata_test_5fproto_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Reply::InitAsDefaultInstance() {
}
class Reply::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Reply::kTermFieldNumber;
const int Reply::kAnsFieldNumber;
const int Reply::kLogsizFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Reply::Reply()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:test.Reply)
}
Reply::Reply(const Reply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&logsiz_) -
    reinterpret_cast<char*>(&term_)) + sizeof(logsiz_));
  // @@protoc_insertion_point(copy_constructor:test.Reply)
}

void Reply::SharedCtor() {
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&logsiz_) -
      reinterpret_cast<char*>(&term_)) + sizeof(logsiz_));
}

Reply::~Reply() {
  // @@protoc_insertion_point(destructor:test.Reply)
  SharedDtor();
}

void Reply::SharedDtor() {
}

void Reply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Reply& Reply::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Reply_test_5fproto_2eproto.base);
  return *internal_default_instance();
}


void Reply::Clear() {
// @@protoc_insertion_point(message_clear_start:test.Reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&logsiz_) -
      reinterpret_cast<char*>(&term_)) + sizeof(logsiz_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Reply::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Reply*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 term = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_term(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool ans = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_ans(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 logsiz = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_logsiz(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:test.Reply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 term = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool ans = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ans_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 logsiz = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &logsiz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:test.Reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:test.Reply)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:test.Reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 term = 1;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->term(), output);
  }

  // bool ans = 2;
  if (this->ans() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ans(), output);
  }

  // int32 logsiz = 3;
  if (this->logsiz() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->logsiz(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:test.Reply)
}

::google::protobuf::uint8* Reply::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:test.Reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 term = 1;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->term(), target);
  }

  // bool ans = 2;
  if (this->ans() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ans(), target);
  }

  // int32 logsiz = 3;
  if (this->logsiz() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->logsiz(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test.Reply)
  return target;
}

size_t Reply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test.Reply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 term = 1;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->term());
  }

  // bool ans = 2;
  if (this->ans() != 0) {
    total_size += 1 + 1;
  }

  // int32 logsiz = 3;
  if (this->logsiz() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->logsiz());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Reply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:test.Reply)
  GOOGLE_DCHECK_NE(&from, this);
  const Reply* source =
      ::google::protobuf::DynamicCastToGenerated<Reply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:test.Reply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:test.Reply)
    MergeFrom(*source);
  }
}

void Reply::MergeFrom(const Reply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:test.Reply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.term() != 0) {
    set_term(from.term());
  }
  if (from.ans() != 0) {
    set_ans(from.ans());
  }
  if (from.logsiz() != 0) {
    set_logsiz(from.logsiz());
  }
}

void Reply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:test.Reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reply::CopyFrom(const Reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test.Reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reply::IsInitialized() const {
  return true;
}

void Reply::Swap(Reply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Reply::InternalSwap(Reply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(term_, other->term_);
  swap(ans_, other->ans_);
  swap(logsiz_, other->logsiz_);
}

::google::protobuf::Metadata Reply::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_test_5fproto_2eproto);
  return ::file_level_metadata_test_5fproto_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace test
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::test::GetV* Arena::CreateMaybeMessage< ::test::GetV >(Arena* arena) {
  return Arena::CreateInternal< ::test::GetV >(arena);
}
template<> PROTOBUF_NOINLINE ::test::Entry* Arena::CreateMaybeMessage< ::test::Entry >(Arena* arena) {
  return Arena::CreateInternal< ::test::Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::test::RequestVoteMessage* Arena::CreateMaybeMessage< ::test::RequestVoteMessage >(Arena* arena) {
  return Arena::CreateInternal< ::test::RequestVoteMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::test::AppendEntriesMessage* Arena::CreateMaybeMessage< ::test::AppendEntriesMessage >(Arena* arena) {
  return Arena::CreateInternal< ::test::AppendEntriesMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::test::Reply* Arena::CreateMaybeMessage< ::test::Reply >(Arena* arena) {
  return Arena::CreateInternal< ::test::Reply >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
