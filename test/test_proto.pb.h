// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test_proto.proto

#ifndef PROTOBUF_INCLUDED_test_5fproto_2eproto
#define PROTOBUF_INCLUDED_test_5fproto_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_test_5fproto_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_test_5fproto_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_test_5fproto_2eproto();
namespace test {
class AppendEntriesMessage;
class AppendEntriesMessageDefaultTypeInternal;
extern AppendEntriesMessageDefaultTypeInternal _AppendEntriesMessage_default_instance_;
class Entry;
class EntryDefaultTypeInternal;
extern EntryDefaultTypeInternal _Entry_default_instance_;
class GetV;
class GetVDefaultTypeInternal;
extern GetVDefaultTypeInternal _GetV_default_instance_;
class Reply;
class ReplyDefaultTypeInternal;
extern ReplyDefaultTypeInternal _Reply_default_instance_;
class RequestVoteMessage;
class RequestVoteMessageDefaultTypeInternal;
extern RequestVoteMessageDefaultTypeInternal _RequestVoteMessage_default_instance_;
}  // namespace test
namespace google {
namespace protobuf {
template<> ::test::AppendEntriesMessage* Arena::CreateMaybeMessage<::test::AppendEntriesMessage>(Arena*);
template<> ::test::Entry* Arena::CreateMaybeMessage<::test::Entry>(Arena*);
template<> ::test::GetV* Arena::CreateMaybeMessage<::test::GetV>(Arena*);
template<> ::test::Reply* Arena::CreateMaybeMessage<::test::Reply>(Arena*);
template<> ::test::RequestVoteMessage* Arena::CreateMaybeMessage<::test::RequestVoteMessage>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace test {

// ===================================================================

class GetV final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:test.GetV) */ {
 public:
  GetV();
  virtual ~GetV();

  GetV(const GetV& from);

  inline GetV& operator=(const GetV& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetV(GetV&& from) noexcept
    : GetV() {
    *this = ::std::move(from);
  }

  inline GetV& operator=(GetV&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetV& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetV* internal_default_instance() {
    return reinterpret_cast<const GetV*>(
               &_GetV_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GetV* other);
  friend void swap(GetV& a, GetV& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetV* New() const final {
    return CreateMaybeMessage<GetV>(nullptr);
  }

  GetV* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetV>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetV& from);
  void MergeFrom(const GetV& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetV* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:test.GetV)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_5fproto_2eproto;
};
// -------------------------------------------------------------------

class Entry final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:test.Entry) */ {
 public:
  Entry();
  virtual ~Entry();

  Entry(const Entry& from);

  inline Entry& operator=(const Entry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Entry(Entry&& from) noexcept
    : Entry() {
    *this = ::std::move(from);
  }

  inline Entry& operator=(Entry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Entry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Entry* internal_default_instance() {
    return reinterpret_cast<const Entry*>(
               &_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Entry* other);
  friend void swap(Entry& a, Entry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Entry* New() const final {
    return CreateMaybeMessage<Entry>(nullptr);
  }

  Entry* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Entry>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Entry& from);
  void MergeFrom(const Entry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Entry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string key = 2;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // string args = 3;
  void clear_args();
  static const int kArgsFieldNumber = 3;
  const ::std::string& args() const;
  void set_args(const ::std::string& value);
  #if LANG_CXX11
  void set_args(::std::string&& value);
  #endif
  void set_args(const char* value);
  void set_args(const char* value, size_t size);
  ::std::string* mutable_args();
  ::std::string* release_args();
  void set_allocated_args(::std::string* args);

  // int32 term = 1;
  void clear_term();
  static const int kTermFieldNumber = 1;
  ::google::protobuf::int32 term() const;
  void set_term(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:test.Entry)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr args_;
  ::google::protobuf::int32 term_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_5fproto_2eproto;
};
// -------------------------------------------------------------------

class RequestVoteMessage final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:test.RequestVoteMessage) */ {
 public:
  RequestVoteMessage();
  virtual ~RequestVoteMessage();

  RequestVoteMessage(const RequestVoteMessage& from);

  inline RequestVoteMessage& operator=(const RequestVoteMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RequestVoteMessage(RequestVoteMessage&& from) noexcept
    : RequestVoteMessage() {
    *this = ::std::move(from);
  }

  inline RequestVoteMessage& operator=(RequestVoteMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RequestVoteMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestVoteMessage* internal_default_instance() {
    return reinterpret_cast<const RequestVoteMessage*>(
               &_RequestVoteMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(RequestVoteMessage* other);
  friend void swap(RequestVoteMessage& a, RequestVoteMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RequestVoteMessage* New() const final {
    return CreateMaybeMessage<RequestVoteMessage>(nullptr);
  }

  RequestVoteMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RequestVoteMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RequestVoteMessage& from);
  void MergeFrom(const RequestVoteMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestVoteMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string candidateID = 2;
  void clear_candidateid();
  static const int kCandidateIDFieldNumber = 2;
  const ::std::string& candidateid() const;
  void set_candidateid(const ::std::string& value);
  #if LANG_CXX11
  void set_candidateid(::std::string&& value);
  #endif
  void set_candidateid(const char* value);
  void set_candidateid(const char* value, size_t size);
  ::std::string* mutable_candidateid();
  ::std::string* release_candidateid();
  void set_allocated_candidateid(::std::string* candidateid);

  // int32 term = 1;
  void clear_term();
  static const int kTermFieldNumber = 1;
  ::google::protobuf::int32 term() const;
  void set_term(::google::protobuf::int32 value);

  // int32 lastLogIndex = 3;
  void clear_lastlogindex();
  static const int kLastLogIndexFieldNumber = 3;
  ::google::protobuf::int32 lastlogindex() const;
  void set_lastlogindex(::google::protobuf::int32 value);

  // int32 lastLogTerm = 4;
  void clear_lastlogterm();
  static const int kLastLogTermFieldNumber = 4;
  ::google::protobuf::int32 lastlogterm() const;
  void set_lastlogterm(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:test.RequestVoteMessage)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr candidateid_;
  ::google::protobuf::int32 term_;
  ::google::protobuf::int32 lastlogindex_;
  ::google::protobuf::int32 lastlogterm_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_5fproto_2eproto;
};
// -------------------------------------------------------------------

class AppendEntriesMessage final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:test.AppendEntriesMessage) */ {
 public:
  AppendEntriesMessage();
  virtual ~AppendEntriesMessage();

  AppendEntriesMessage(const AppendEntriesMessage& from);

  inline AppendEntriesMessage& operator=(const AppendEntriesMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AppendEntriesMessage(AppendEntriesMessage&& from) noexcept
    : AppendEntriesMessage() {
    *this = ::std::move(from);
  }

  inline AppendEntriesMessage& operator=(AppendEntriesMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AppendEntriesMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppendEntriesMessage* internal_default_instance() {
    return reinterpret_cast<const AppendEntriesMessage*>(
               &_AppendEntriesMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(AppendEntriesMessage* other);
  friend void swap(AppendEntriesMessage& a, AppendEntriesMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AppendEntriesMessage* New() const final {
    return CreateMaybeMessage<AppendEntriesMessage>(nullptr);
  }

  AppendEntriesMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AppendEntriesMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AppendEntriesMessage& from);
  void MergeFrom(const AppendEntriesMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppendEntriesMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .test.Entry entries = 5;
  int entries_size() const;
  void clear_entries();
  static const int kEntriesFieldNumber = 5;
  ::test::Entry* mutable_entries(int index);
  ::google::protobuf::RepeatedPtrField< ::test::Entry >*
      mutable_entries();
  const ::test::Entry& entries(int index) const;
  ::test::Entry* add_entries();
  const ::google::protobuf::RepeatedPtrField< ::test::Entry >&
      entries() const;

  // string leaderID = 2;
  void clear_leaderid();
  static const int kLeaderIDFieldNumber = 2;
  const ::std::string& leaderid() const;
  void set_leaderid(const ::std::string& value);
  #if LANG_CXX11
  void set_leaderid(::std::string&& value);
  #endif
  void set_leaderid(const char* value);
  void set_leaderid(const char* value, size_t size);
  ::std::string* mutable_leaderid();
  ::std::string* release_leaderid();
  void set_allocated_leaderid(::std::string* leaderid);

  // int32 term = 1;
  void clear_term();
  static const int kTermFieldNumber = 1;
  ::google::protobuf::int32 term() const;
  void set_term(::google::protobuf::int32 value);

  // int32 prevLogIndex = 3;
  void clear_prevlogindex();
  static const int kPrevLogIndexFieldNumber = 3;
  ::google::protobuf::int32 prevlogindex() const;
  void set_prevlogindex(::google::protobuf::int32 value);

  // int32 prevLogTerm = 4;
  void clear_prevlogterm();
  static const int kPrevLogTermFieldNumber = 4;
  ::google::protobuf::int32 prevlogterm() const;
  void set_prevlogterm(::google::protobuf::int32 value);

  // int32 leaderCommit = 6;
  void clear_leadercommit();
  static const int kLeaderCommitFieldNumber = 6;
  ::google::protobuf::int32 leadercommit() const;
  void set_leadercommit(::google::protobuf::int32 value);

  // int32 logsiz = 7;
  void clear_logsiz();
  static const int kLogsizFieldNumber = 7;
  ::google::protobuf::int32 logsiz() const;
  void set_logsiz(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:test.AppendEntriesMessage)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::test::Entry > entries_;
  ::google::protobuf::internal::ArenaStringPtr leaderid_;
  ::google::protobuf::int32 term_;
  ::google::protobuf::int32 prevlogindex_;
  ::google::protobuf::int32 prevlogterm_;
  ::google::protobuf::int32 leadercommit_;
  ::google::protobuf::int32 logsiz_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_5fproto_2eproto;
};
// -------------------------------------------------------------------

class Reply final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:test.Reply) */ {
 public:
  Reply();
  virtual ~Reply();

  Reply(const Reply& from);

  inline Reply& operator=(const Reply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Reply(Reply&& from) noexcept
    : Reply() {
    *this = ::std::move(from);
  }

  inline Reply& operator=(Reply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Reply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Reply* internal_default_instance() {
    return reinterpret_cast<const Reply*>(
               &_Reply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Reply* other);
  friend void swap(Reply& a, Reply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Reply* New() const final {
    return CreateMaybeMessage<Reply>(nullptr);
  }

  Reply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Reply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Reply& from);
  void MergeFrom(const Reply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Reply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 term = 1;
  void clear_term();
  static const int kTermFieldNumber = 1;
  ::google::protobuf::int32 term() const;
  void set_term(::google::protobuf::int32 value);

  // bool ans = 2;
  void clear_ans();
  static const int kAnsFieldNumber = 2;
  bool ans() const;
  void set_ans(bool value);

  // int32 logsiz = 3;
  void clear_logsiz();
  static const int kLogsizFieldNumber = 3;
  ::google::protobuf::int32 logsiz() const;
  void set_logsiz(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:test.Reply)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 term_;
  bool ans_;
  ::google::protobuf::int32 logsiz_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_5fproto_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetV

// string key = 1;
inline void GetV::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetV::key() const {
  // @@protoc_insertion_point(field_get:test.GetV.key)
  return key_.GetNoArena();
}
inline void GetV::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:test.GetV.key)
}
#if LANG_CXX11
inline void GetV::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:test.GetV.key)
}
#endif
inline void GetV::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:test.GetV.key)
}
inline void GetV::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:test.GetV.key)
}
inline ::std::string* GetV::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:test.GetV.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetV::release_key() {
  // @@protoc_insertion_point(field_release:test.GetV.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetV::set_allocated_key(::std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:test.GetV.key)
}

// -------------------------------------------------------------------

// Entry

// int32 term = 1;
inline void Entry::clear_term() {
  term_ = 0;
}
inline ::google::protobuf::int32 Entry::term() const {
  // @@protoc_insertion_point(field_get:test.Entry.term)
  return term_;
}
inline void Entry::set_term(::google::protobuf::int32 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:test.Entry.term)
}

// string key = 2;
inline void Entry::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Entry::key() const {
  // @@protoc_insertion_point(field_get:test.Entry.key)
  return key_.GetNoArena();
}
inline void Entry::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:test.Entry.key)
}
#if LANG_CXX11
inline void Entry::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:test.Entry.key)
}
#endif
inline void Entry::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:test.Entry.key)
}
inline void Entry::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:test.Entry.key)
}
inline ::std::string* Entry::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:test.Entry.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Entry::release_key() {
  // @@protoc_insertion_point(field_release:test.Entry.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Entry::set_allocated_key(::std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:test.Entry.key)
}

// string args = 3;
inline void Entry::clear_args() {
  args_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Entry::args() const {
  // @@protoc_insertion_point(field_get:test.Entry.args)
  return args_.GetNoArena();
}
inline void Entry::set_args(const ::std::string& value) {
  
  args_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:test.Entry.args)
}
#if LANG_CXX11
inline void Entry::set_args(::std::string&& value) {
  
  args_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:test.Entry.args)
}
#endif
inline void Entry::set_args(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  args_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:test.Entry.args)
}
inline void Entry::set_args(const char* value, size_t size) {
  
  args_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:test.Entry.args)
}
inline ::std::string* Entry::mutable_args() {
  
  // @@protoc_insertion_point(field_mutable:test.Entry.args)
  return args_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Entry::release_args() {
  // @@protoc_insertion_point(field_release:test.Entry.args)
  
  return args_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Entry::set_allocated_args(::std::string* args) {
  if (args != nullptr) {
    
  } else {
    
  }
  args_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), args);
  // @@protoc_insertion_point(field_set_allocated:test.Entry.args)
}

// -------------------------------------------------------------------

// RequestVoteMessage

// int32 term = 1;
inline void RequestVoteMessage::clear_term() {
  term_ = 0;
}
inline ::google::protobuf::int32 RequestVoteMessage::term() const {
  // @@protoc_insertion_point(field_get:test.RequestVoteMessage.term)
  return term_;
}
inline void RequestVoteMessage::set_term(::google::protobuf::int32 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:test.RequestVoteMessage.term)
}

// string candidateID = 2;
inline void RequestVoteMessage::clear_candidateid() {
  candidateid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RequestVoteMessage::candidateid() const {
  // @@protoc_insertion_point(field_get:test.RequestVoteMessage.candidateID)
  return candidateid_.GetNoArena();
}
inline void RequestVoteMessage::set_candidateid(const ::std::string& value) {
  
  candidateid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:test.RequestVoteMessage.candidateID)
}
#if LANG_CXX11
inline void RequestVoteMessage::set_candidateid(::std::string&& value) {
  
  candidateid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:test.RequestVoteMessage.candidateID)
}
#endif
inline void RequestVoteMessage::set_candidateid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  candidateid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:test.RequestVoteMessage.candidateID)
}
inline void RequestVoteMessage::set_candidateid(const char* value, size_t size) {
  
  candidateid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:test.RequestVoteMessage.candidateID)
}
inline ::std::string* RequestVoteMessage::mutable_candidateid() {
  
  // @@protoc_insertion_point(field_mutable:test.RequestVoteMessage.candidateID)
  return candidateid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequestVoteMessage::release_candidateid() {
  // @@protoc_insertion_point(field_release:test.RequestVoteMessage.candidateID)
  
  return candidateid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestVoteMessage::set_allocated_candidateid(::std::string* candidateid) {
  if (candidateid != nullptr) {
    
  } else {
    
  }
  candidateid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), candidateid);
  // @@protoc_insertion_point(field_set_allocated:test.RequestVoteMessage.candidateID)
}

// int32 lastLogIndex = 3;
inline void RequestVoteMessage::clear_lastlogindex() {
  lastlogindex_ = 0;
}
inline ::google::protobuf::int32 RequestVoteMessage::lastlogindex() const {
  // @@protoc_insertion_point(field_get:test.RequestVoteMessage.lastLogIndex)
  return lastlogindex_;
}
inline void RequestVoteMessage::set_lastlogindex(::google::protobuf::int32 value) {
  
  lastlogindex_ = value;
  // @@protoc_insertion_point(field_set:test.RequestVoteMessage.lastLogIndex)
}

// int32 lastLogTerm = 4;
inline void RequestVoteMessage::clear_lastlogterm() {
  lastlogterm_ = 0;
}
inline ::google::protobuf::int32 RequestVoteMessage::lastlogterm() const {
  // @@protoc_insertion_point(field_get:test.RequestVoteMessage.lastLogTerm)
  return lastlogterm_;
}
inline void RequestVoteMessage::set_lastlogterm(::google::protobuf::int32 value) {
  
  lastlogterm_ = value;
  // @@protoc_insertion_point(field_set:test.RequestVoteMessage.lastLogTerm)
}

// -------------------------------------------------------------------

// AppendEntriesMessage

// int32 term = 1;
inline void AppendEntriesMessage::clear_term() {
  term_ = 0;
}
inline ::google::protobuf::int32 AppendEntriesMessage::term() const {
  // @@protoc_insertion_point(field_get:test.AppendEntriesMessage.term)
  return term_;
}
inline void AppendEntriesMessage::set_term(::google::protobuf::int32 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:test.AppendEntriesMessage.term)
}

// string leaderID = 2;
inline void AppendEntriesMessage::clear_leaderid() {
  leaderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AppendEntriesMessage::leaderid() const {
  // @@protoc_insertion_point(field_get:test.AppendEntriesMessage.leaderID)
  return leaderid_.GetNoArena();
}
inline void AppendEntriesMessage::set_leaderid(const ::std::string& value) {
  
  leaderid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:test.AppendEntriesMessage.leaderID)
}
#if LANG_CXX11
inline void AppendEntriesMessage::set_leaderid(::std::string&& value) {
  
  leaderid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:test.AppendEntriesMessage.leaderID)
}
#endif
inline void AppendEntriesMessage::set_leaderid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  leaderid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:test.AppendEntriesMessage.leaderID)
}
inline void AppendEntriesMessage::set_leaderid(const char* value, size_t size) {
  
  leaderid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:test.AppendEntriesMessage.leaderID)
}
inline ::std::string* AppendEntriesMessage::mutable_leaderid() {
  
  // @@protoc_insertion_point(field_mutable:test.AppendEntriesMessage.leaderID)
  return leaderid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AppendEntriesMessage::release_leaderid() {
  // @@protoc_insertion_point(field_release:test.AppendEntriesMessage.leaderID)
  
  return leaderid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppendEntriesMessage::set_allocated_leaderid(::std::string* leaderid) {
  if (leaderid != nullptr) {
    
  } else {
    
  }
  leaderid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), leaderid);
  // @@protoc_insertion_point(field_set_allocated:test.AppendEntriesMessage.leaderID)
}

// int32 prevLogIndex = 3;
inline void AppendEntriesMessage::clear_prevlogindex() {
  prevlogindex_ = 0;
}
inline ::google::protobuf::int32 AppendEntriesMessage::prevlogindex() const {
  // @@protoc_insertion_point(field_get:test.AppendEntriesMessage.prevLogIndex)
  return prevlogindex_;
}
inline void AppendEntriesMessage::set_prevlogindex(::google::protobuf::int32 value) {
  
  prevlogindex_ = value;
  // @@protoc_insertion_point(field_set:test.AppendEntriesMessage.prevLogIndex)
}

// int32 prevLogTerm = 4;
inline void AppendEntriesMessage::clear_prevlogterm() {
  prevlogterm_ = 0;
}
inline ::google::protobuf::int32 AppendEntriesMessage::prevlogterm() const {
  // @@protoc_insertion_point(field_get:test.AppendEntriesMessage.prevLogTerm)
  return prevlogterm_;
}
inline void AppendEntriesMessage::set_prevlogterm(::google::protobuf::int32 value) {
  
  prevlogterm_ = value;
  // @@protoc_insertion_point(field_set:test.AppendEntriesMessage.prevLogTerm)
}

// repeated .test.Entry entries = 5;
inline int AppendEntriesMessage::entries_size() const {
  return entries_.size();
}
inline void AppendEntriesMessage::clear_entries() {
  entries_.Clear();
}
inline ::test::Entry* AppendEntriesMessage::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:test.AppendEntriesMessage.entries)
  return entries_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::test::Entry >*
AppendEntriesMessage::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:test.AppendEntriesMessage.entries)
  return &entries_;
}
inline const ::test::Entry& AppendEntriesMessage::entries(int index) const {
  // @@protoc_insertion_point(field_get:test.AppendEntriesMessage.entries)
  return entries_.Get(index);
}
inline ::test::Entry* AppendEntriesMessage::add_entries() {
  // @@protoc_insertion_point(field_add:test.AppendEntriesMessage.entries)
  return entries_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::test::Entry >&
AppendEntriesMessage::entries() const {
  // @@protoc_insertion_point(field_list:test.AppendEntriesMessage.entries)
  return entries_;
}

// int32 leaderCommit = 6;
inline void AppendEntriesMessage::clear_leadercommit() {
  leadercommit_ = 0;
}
inline ::google::protobuf::int32 AppendEntriesMessage::leadercommit() const {
  // @@protoc_insertion_point(field_get:test.AppendEntriesMessage.leaderCommit)
  return leadercommit_;
}
inline void AppendEntriesMessage::set_leadercommit(::google::protobuf::int32 value) {
  
  leadercommit_ = value;
  // @@protoc_insertion_point(field_set:test.AppendEntriesMessage.leaderCommit)
}

// int32 logsiz = 7;
inline void AppendEntriesMessage::clear_logsiz() {
  logsiz_ = 0;
}
inline ::google::protobuf::int32 AppendEntriesMessage::logsiz() const {
  // @@protoc_insertion_point(field_get:test.AppendEntriesMessage.logsiz)
  return logsiz_;
}
inline void AppendEntriesMessage::set_logsiz(::google::protobuf::int32 value) {
  
  logsiz_ = value;
  // @@protoc_insertion_point(field_set:test.AppendEntriesMessage.logsiz)
}

// -------------------------------------------------------------------

// Reply

// int32 term = 1;
inline void Reply::clear_term() {
  term_ = 0;
}
inline ::google::protobuf::int32 Reply::term() const {
  // @@protoc_insertion_point(field_get:test.Reply.term)
  return term_;
}
inline void Reply::set_term(::google::protobuf::int32 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:test.Reply.term)
}

// bool ans = 2;
inline void Reply::clear_ans() {
  ans_ = false;
}
inline bool Reply::ans() const {
  // @@protoc_insertion_point(field_get:test.Reply.ans)
  return ans_;
}
inline void Reply::set_ans(bool value) {
  
  ans_ = value;
  // @@protoc_insertion_point(field_set:test.Reply.ans)
}

// int32 logsiz = 3;
inline void Reply::clear_logsiz() {
  logsiz_ = 0;
}
inline ::google::protobuf::int32 Reply::logsiz() const {
  // @@protoc_insertion_point(field_get:test.Reply.logsiz)
  return logsiz_;
}
inline void Reply::set_logsiz(::google::protobuf::int32 value) {
  
  logsiz_ = value;
  // @@protoc_insertion_point(field_set:test.Reply.logsiz)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace test

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_test_5fproto_2eproto
