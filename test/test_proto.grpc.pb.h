// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: test_proto.proto
#ifndef GRPC_test_5fproto_2eproto__INCLUDED
#define GRPC_test_5fproto_2eproto__INCLUDED

#include "test_proto.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace test {

class Vergil final {
 public:
  static constexpr char const* service_full_name() {
    return "test.Vergil";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status RequestVote(::grpc::ClientContext* context, const ::test::RequestVoteMessage& request, ::test::Reply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::test::Reply>> AsyncRequestVote(::grpc::ClientContext* context, const ::test::RequestVoteMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::test::Reply>>(AsyncRequestVoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::test::Reply>> PrepareAsyncRequestVote(::grpc::ClientContext* context, const ::test::RequestVoteMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::test::Reply>>(PrepareAsyncRequestVoteRaw(context, request, cq));
    }
    virtual ::grpc::Status AppendEntries(::grpc::ClientContext* context, const ::test::AppendEntriesMessage& request, ::test::Reply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::test::Reply>> AsyncAppendEntries(::grpc::ClientContext* context, const ::test::AppendEntriesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::test::Reply>>(AsyncAppendEntriesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::test::Reply>> PrepareAsyncAppendEntries(::grpc::ClientContext* context, const ::test::AppendEntriesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::test::Reply>>(PrepareAsyncAppendEntriesRaw(context, request, cq));
    }
    virtual ::grpc::Status LeaderAppend(::grpc::ClientContext* context, const ::test::Entry& request, ::test::Reply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::test::Reply>> AsyncLeaderAppend(::grpc::ClientContext* context, const ::test::Entry& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::test::Reply>>(AsyncLeaderAppendRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::test::Reply>> PrepareAsyncLeaderAppend(::grpc::ClientContext* context, const ::test::Entry& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::test::Reply>>(PrepareAsyncLeaderAppendRaw(context, request, cq));
    }
    virtual ::grpc::Status GetValue(::grpc::ClientContext* context, const ::test::GetV& request, ::test::GetV* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::test::GetV>> AsyncGetValue(::grpc::ClientContext* context, const ::test::GetV& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::test::GetV>>(AsyncGetValueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::test::GetV>> PrepareAsyncGetValue(::grpc::ClientContext* context, const ::test::GetV& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::test::GetV>>(PrepareAsyncGetValueRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void RequestVote(::grpc::ClientContext* context, const ::test::RequestVoteMessage* request, ::test::Reply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RequestVote(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::test::Reply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AppendEntries(::grpc::ClientContext* context, const ::test::AppendEntriesMessage* request, ::test::Reply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AppendEntries(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::test::Reply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void LeaderAppend(::grpc::ClientContext* context, const ::test::Entry* request, ::test::Reply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void LeaderAppend(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::test::Reply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetValue(::grpc::ClientContext* context, const ::test::GetV* request, ::test::GetV* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetValue(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::test::GetV* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::test::Reply>* AsyncRequestVoteRaw(::grpc::ClientContext* context, const ::test::RequestVoteMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::test::Reply>* PrepareAsyncRequestVoteRaw(::grpc::ClientContext* context, const ::test::RequestVoteMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::test::Reply>* AsyncAppendEntriesRaw(::grpc::ClientContext* context, const ::test::AppendEntriesMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::test::Reply>* PrepareAsyncAppendEntriesRaw(::grpc::ClientContext* context, const ::test::AppendEntriesMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::test::Reply>* AsyncLeaderAppendRaw(::grpc::ClientContext* context, const ::test::Entry& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::test::Reply>* PrepareAsyncLeaderAppendRaw(::grpc::ClientContext* context, const ::test::Entry& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::test::GetV>* AsyncGetValueRaw(::grpc::ClientContext* context, const ::test::GetV& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::test::GetV>* PrepareAsyncGetValueRaw(::grpc::ClientContext* context, const ::test::GetV& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status RequestVote(::grpc::ClientContext* context, const ::test::RequestVoteMessage& request, ::test::Reply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::test::Reply>> AsyncRequestVote(::grpc::ClientContext* context, const ::test::RequestVoteMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::test::Reply>>(AsyncRequestVoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::test::Reply>> PrepareAsyncRequestVote(::grpc::ClientContext* context, const ::test::RequestVoteMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::test::Reply>>(PrepareAsyncRequestVoteRaw(context, request, cq));
    }
    ::grpc::Status AppendEntries(::grpc::ClientContext* context, const ::test::AppendEntriesMessage& request, ::test::Reply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::test::Reply>> AsyncAppendEntries(::grpc::ClientContext* context, const ::test::AppendEntriesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::test::Reply>>(AsyncAppendEntriesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::test::Reply>> PrepareAsyncAppendEntries(::grpc::ClientContext* context, const ::test::AppendEntriesMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::test::Reply>>(PrepareAsyncAppendEntriesRaw(context, request, cq));
    }
    ::grpc::Status LeaderAppend(::grpc::ClientContext* context, const ::test::Entry& request, ::test::Reply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::test::Reply>> AsyncLeaderAppend(::grpc::ClientContext* context, const ::test::Entry& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::test::Reply>>(AsyncLeaderAppendRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::test::Reply>> PrepareAsyncLeaderAppend(::grpc::ClientContext* context, const ::test::Entry& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::test::Reply>>(PrepareAsyncLeaderAppendRaw(context, request, cq));
    }
    ::grpc::Status GetValue(::grpc::ClientContext* context, const ::test::GetV& request, ::test::GetV* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::test::GetV>> AsyncGetValue(::grpc::ClientContext* context, const ::test::GetV& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::test::GetV>>(AsyncGetValueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::test::GetV>> PrepareAsyncGetValue(::grpc::ClientContext* context, const ::test::GetV& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::test::GetV>>(PrepareAsyncGetValueRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void RequestVote(::grpc::ClientContext* context, const ::test::RequestVoteMessage* request, ::test::Reply* response, std::function<void(::grpc::Status)>) override;
      void RequestVote(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::test::Reply* response, std::function<void(::grpc::Status)>) override;
      void AppendEntries(::grpc::ClientContext* context, const ::test::AppendEntriesMessage* request, ::test::Reply* response, std::function<void(::grpc::Status)>) override;
      void AppendEntries(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::test::Reply* response, std::function<void(::grpc::Status)>) override;
      void LeaderAppend(::grpc::ClientContext* context, const ::test::Entry* request, ::test::Reply* response, std::function<void(::grpc::Status)>) override;
      void LeaderAppend(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::test::Reply* response, std::function<void(::grpc::Status)>) override;
      void GetValue(::grpc::ClientContext* context, const ::test::GetV* request, ::test::GetV* response, std::function<void(::grpc::Status)>) override;
      void GetValue(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::test::GetV* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::test::Reply>* AsyncRequestVoteRaw(::grpc::ClientContext* context, const ::test::RequestVoteMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::test::Reply>* PrepareAsyncRequestVoteRaw(::grpc::ClientContext* context, const ::test::RequestVoteMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::test::Reply>* AsyncAppendEntriesRaw(::grpc::ClientContext* context, const ::test::AppendEntriesMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::test::Reply>* PrepareAsyncAppendEntriesRaw(::grpc::ClientContext* context, const ::test::AppendEntriesMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::test::Reply>* AsyncLeaderAppendRaw(::grpc::ClientContext* context, const ::test::Entry& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::test::Reply>* PrepareAsyncLeaderAppendRaw(::grpc::ClientContext* context, const ::test::Entry& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::test::GetV>* AsyncGetValueRaw(::grpc::ClientContext* context, const ::test::GetV& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::test::GetV>* PrepareAsyncGetValueRaw(::grpc::ClientContext* context, const ::test::GetV& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_RequestVote_;
    const ::grpc::internal::RpcMethod rpcmethod_AppendEntries_;
    const ::grpc::internal::RpcMethod rpcmethod_LeaderAppend_;
    const ::grpc::internal::RpcMethod rpcmethod_GetValue_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status RequestVote(::grpc::ServerContext* context, const ::test::RequestVoteMessage* request, ::test::Reply* response);
    virtual ::grpc::Status AppendEntries(::grpc::ServerContext* context, const ::test::AppendEntriesMessage* request, ::test::Reply* response);
    virtual ::grpc::Status LeaderAppend(::grpc::ServerContext* context, const ::test::Entry* request, ::test::Reply* response);
    virtual ::grpc::Status GetValue(::grpc::ServerContext* context, const ::test::GetV* request, ::test::GetV* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_RequestVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RequestVote() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_RequestVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestVote(::grpc::ServerContext* context, const ::test::RequestVoteMessage* request, ::test::Reply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestVote(::grpc::ServerContext* context, ::test::RequestVoteMessage* request, ::grpc::ServerAsyncResponseWriter< ::test::Reply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AppendEntries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_AppendEntries() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_AppendEntries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AppendEntries(::grpc::ServerContext* context, const ::test::AppendEntriesMessage* request, ::test::Reply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAppendEntries(::grpc::ServerContext* context, ::test::AppendEntriesMessage* request, ::grpc::ServerAsyncResponseWriter< ::test::Reply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LeaderAppend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_LeaderAppend() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_LeaderAppend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LeaderAppend(::grpc::ServerContext* context, const ::test::Entry* request, ::test::Reply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLeaderAppend(::grpc::ServerContext* context, ::test::Entry* request, ::grpc::ServerAsyncResponseWriter< ::test::Reply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetValue() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetValue(::grpc::ServerContext* context, const ::test::GetV* request, ::test::GetV* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetValue(::grpc::ServerContext* context, ::test::GetV* request, ::grpc::ServerAsyncResponseWriter< ::test::GetV>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_RequestVote<WithAsyncMethod_AppendEntries<WithAsyncMethod_LeaderAppend<WithAsyncMethod_GetValue<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RequestVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_RequestVote() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::test::RequestVoteMessage, ::test::Reply>(
          [this](::grpc::ServerContext* context,
                 const ::test::RequestVoteMessage* request,
                 ::test::Reply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->RequestVote(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_RequestVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestVote(::grpc::ServerContext* context, const ::test::RequestVoteMessage* request, ::test::Reply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void RequestVote(::grpc::ServerContext* context, const ::test::RequestVoteMessage* request, ::test::Reply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AppendEntries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_AppendEntries() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::test::AppendEntriesMessage, ::test::Reply>(
          [this](::grpc::ServerContext* context,
                 const ::test::AppendEntriesMessage* request,
                 ::test::Reply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->AppendEntries(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_AppendEntries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AppendEntries(::grpc::ServerContext* context, const ::test::AppendEntriesMessage* request, ::test::Reply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void AppendEntries(::grpc::ServerContext* context, const ::test::AppendEntriesMessage* request, ::test::Reply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_LeaderAppend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_LeaderAppend() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::test::Entry, ::test::Reply>(
          [this](::grpc::ServerContext* context,
                 const ::test::Entry* request,
                 ::test::Reply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->LeaderAppend(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_LeaderAppend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LeaderAppend(::grpc::ServerContext* context, const ::test::Entry* request, ::test::Reply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void LeaderAppend(::grpc::ServerContext* context, const ::test::Entry* request, ::test::Reply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetValue() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::test::GetV, ::test::GetV>(
          [this](::grpc::ServerContext* context,
                 const ::test::GetV* request,
                 ::test::GetV* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetValue(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_GetValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetValue(::grpc::ServerContext* context, const ::test::GetV* request, ::test::GetV* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetValue(::grpc::ServerContext* context, const ::test::GetV* request, ::test::GetV* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_RequestVote<ExperimentalWithCallbackMethod_AppendEntries<ExperimentalWithCallbackMethod_LeaderAppend<ExperimentalWithCallbackMethod_GetValue<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_RequestVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RequestVote() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_RequestVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestVote(::grpc::ServerContext* context, const ::test::RequestVoteMessage* request, ::test::Reply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AppendEntries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_AppendEntries() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_AppendEntries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AppendEntries(::grpc::ServerContext* context, const ::test::AppendEntriesMessage* request, ::test::Reply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LeaderAppend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_LeaderAppend() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_LeaderAppend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LeaderAppend(::grpc::ServerContext* context, const ::test::Entry* request, ::test::Reply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetValue() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetValue(::grpc::ServerContext* context, const ::test::GetV* request, ::test::GetV* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_RequestVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_RequestVote() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_RequestVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestVote(::grpc::ServerContext* context, const ::test::RequestVoteMessage* request, ::test::Reply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestVote(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AppendEntries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_AppendEntries() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_AppendEntries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AppendEntries(::grpc::ServerContext* context, const ::test::AppendEntriesMessage* request, ::test::Reply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAppendEntries(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_LeaderAppend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_LeaderAppend() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_LeaderAppend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LeaderAppend(::grpc::ServerContext* context, const ::test::Entry* request, ::test::Reply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLeaderAppend(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetValue() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetValue(::grpc::ServerContext* context, const ::test::GetV* request, ::test::GetV* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetValue(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RequestVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_RequestVote() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->RequestVote(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_RequestVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestVote(::grpc::ServerContext* context, const ::test::RequestVoteMessage* request, ::test::Reply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void RequestVote(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AppendEntries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_AppendEntries() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->AppendEntries(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_AppendEntries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AppendEntries(::grpc::ServerContext* context, const ::test::AppendEntriesMessage* request, ::test::Reply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void AppendEntries(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_LeaderAppend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_LeaderAppend() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->LeaderAppend(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_LeaderAppend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LeaderAppend(::grpc::ServerContext* context, const ::test::Entry* request, ::test::Reply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void LeaderAppend(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetValue() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetValue(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetValue(::grpc::ServerContext* context, const ::test::GetV* request, ::test::GetV* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetValue(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RequestVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RequestVote() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::test::RequestVoteMessage, ::test::Reply>(std::bind(&WithStreamedUnaryMethod_RequestVote<BaseClass>::StreamedRequestVote, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RequestVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RequestVote(::grpc::ServerContext* context, const ::test::RequestVoteMessage* request, ::test::Reply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRequestVote(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::test::RequestVoteMessage,::test::Reply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AppendEntries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_AppendEntries() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::test::AppendEntriesMessage, ::test::Reply>(std::bind(&WithStreamedUnaryMethod_AppendEntries<BaseClass>::StreamedAppendEntries, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_AppendEntries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AppendEntries(::grpc::ServerContext* context, const ::test::AppendEntriesMessage* request, ::test::Reply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAppendEntries(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::test::AppendEntriesMessage,::test::Reply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_LeaderAppend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_LeaderAppend() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::test::Entry, ::test::Reply>(std::bind(&WithStreamedUnaryMethod_LeaderAppend<BaseClass>::StreamedLeaderAppend, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_LeaderAppend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LeaderAppend(::grpc::ServerContext* context, const ::test::Entry* request, ::test::Reply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLeaderAppend(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::test::Entry,::test::Reply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetValue() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::test::GetV, ::test::GetV>(std::bind(&WithStreamedUnaryMethod_GetValue<BaseClass>::StreamedGetValue, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetValue(::grpc::ServerContext* context, const ::test::GetV* request, ::test::GetV* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetValue(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::test::GetV,::test::GetV>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_RequestVote<WithStreamedUnaryMethod_AppendEntries<WithStreamedUnaryMethod_LeaderAppend<WithStreamedUnaryMethod_GetValue<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_RequestVote<WithStreamedUnaryMethod_AppendEntries<WithStreamedUnaryMethod_LeaderAppend<WithStreamedUnaryMethod_GetValue<Service > > > > StreamedService;
};

}  // namespace test


#endif  // GRPC_test_5fproto_2eproto__INCLUDED
